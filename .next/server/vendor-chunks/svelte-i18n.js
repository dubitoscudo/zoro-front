"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/svelte-i18n";
exports.ids = ["vendor-chunks/svelte-i18n"];
exports.modules = {

/***/ "(ssr)/./node_modules/svelte-i18n/dist/runtime.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/svelte-i18n/dist/runtime.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ $format),\n/* harmony export */   addMessages: () => (/* binding */ addMessages),\n/* harmony export */   date: () => (/* binding */ $formatDate),\n/* harmony export */   defineMessages: () => (/* binding */ defineMessages),\n/* harmony export */   dictionary: () => (/* binding */ $dictionary),\n/* harmony export */   format: () => (/* binding */ $format),\n/* harmony export */   getDateFormatter: () => (/* binding */ getDateFormatter),\n/* harmony export */   getLocaleFromHash: () => (/* binding */ getLocaleFromHash),\n/* harmony export */   getLocaleFromHostname: () => (/* binding */ getLocaleFromHostname),\n/* harmony export */   getLocaleFromNavigator: () => (/* binding */ getLocaleFromNavigator),\n/* harmony export */   getLocaleFromPathname: () => (/* binding */ getLocaleFromPathname),\n/* harmony export */   getLocaleFromQueryString: () => (/* binding */ getLocaleFromQueryString),\n/* harmony export */   getMessageFormatter: () => (/* binding */ getMessageFormatter),\n/* harmony export */   getNumberFormatter: () => (/* binding */ getNumberFormatter),\n/* harmony export */   getTimeFormatter: () => (/* binding */ getTimeFormatter),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   isLoading: () => (/* binding */ $isLoading),\n/* harmony export */   json: () => (/* binding */ $getJSON),\n/* harmony export */   locale: () => (/* binding */ $locale),\n/* harmony export */   locales: () => (/* binding */ $locales),\n/* harmony export */   number: () => (/* binding */ $formatNumber),\n/* harmony export */   register: () => (/* binding */ registerLocaleLoader),\n/* harmony export */   t: () => (/* binding */ $format),\n/* harmony export */   time: () => (/* binding */ $formatTime),\n/* harmony export */   unwrapFunctionStore: () => (/* binding */ unwrapFunctionStore),\n/* harmony export */   waitLocale: () => (/* binding */ waitLocale)\n/* harmony export */ });\n/* harmony import */ var svelte_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svelte/store */ \"(ssr)/./node_modules/svelte/store/index.mjs\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deepmerge__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/lib/src/core.js\");\n\n\n\n\nfunction delve(obj, fullKey) {\n  if (fullKey == null)\n    return void 0;\n  if (fullKey in obj) {\n    return obj[fullKey];\n  }\n  const keys = fullKey.split(\".\");\n  let result = obj;\n  for (let p = 0; p < keys.length; p++) {\n    if (typeof result === \"object\") {\n      if (p > 0) {\n        const partialKey = keys.slice(p, keys.length).join(\".\");\n        if (partialKey in result) {\n          result = result[partialKey];\n          break;\n        }\n      }\n      result = result[keys[p]];\n    } else {\n      result = void 0;\n    }\n  }\n  return result;\n}\n\nconst lookupCache = {};\nconst addToCache = (path, locale, message) => {\n  if (!message)\n    return message;\n  if (!(locale in lookupCache))\n    lookupCache[locale] = {};\n  if (!(path in lookupCache[locale]))\n    lookupCache[locale][path] = message;\n  return message;\n};\nconst lookup = (path, refLocale) => {\n  if (refLocale == null)\n    return void 0;\n  if (refLocale in lookupCache && path in lookupCache[refLocale]) {\n    return lookupCache[refLocale][path];\n  }\n  const locales = getPossibleLocales(refLocale);\n  for (let i = 0; i < locales.length; i++) {\n    const locale = locales[i];\n    const message = getMessageFromDictionary(locale, path);\n    if (message) {\n      return addToCache(path, refLocale, message);\n    }\n  }\n  return void 0;\n};\n\nlet dictionary;\nconst $dictionary = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.writable)({});\nfunction getLocaleDictionary(locale) {\n  return dictionary[locale] || null;\n}\nfunction hasLocaleDictionary(locale) {\n  return locale in dictionary;\n}\nfunction getMessageFromDictionary(locale, id) {\n  if (!hasLocaleDictionary(locale)) {\n    return null;\n  }\n  const localeDictionary = getLocaleDictionary(locale);\n  const match = delve(localeDictionary, id);\n  return match;\n}\nfunction getClosestAvailableLocale(refLocale) {\n  if (refLocale == null)\n    return void 0;\n  const relatedLocales = getPossibleLocales(refLocale);\n  for (let i = 0; i < relatedLocales.length; i++) {\n    const locale = relatedLocales[i];\n    if (hasLocaleDictionary(locale)) {\n      return locale;\n    }\n  }\n  return void 0;\n}\nfunction addMessages(locale, ...partials) {\n  delete lookupCache[locale];\n  $dictionary.update((d) => {\n    d[locale] = deepmerge__WEBPACK_IMPORTED_MODULE_1___default().all([d[locale] || {}, ...partials]);\n    return d;\n  });\n}\nconst $locales = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)(\n  [$dictionary],\n  ([dictionary2]) => Object.keys(dictionary2)\n);\n$dictionary.subscribe((newDictionary) => dictionary = newDictionary);\n\nconst queue = {};\nfunction createLocaleQueue(locale) {\n  queue[locale] = /* @__PURE__ */ new Set();\n}\nfunction removeLoaderFromQueue(locale, loader) {\n  queue[locale].delete(loader);\n  if (queue[locale].size === 0) {\n    delete queue[locale];\n  }\n}\nfunction getLocaleQueue(locale) {\n  return queue[locale];\n}\nfunction getLocalesQueues(locale) {\n  return getPossibleLocales(locale).map((localeItem) => {\n    const localeQueue = getLocaleQueue(localeItem);\n    return [localeItem, localeQueue ? [...localeQueue] : []];\n  }).filter(([, localeQueue]) => localeQueue.length > 0);\n}\nfunction hasLocaleQueue(locale) {\n  if (locale == null)\n    return false;\n  return getPossibleLocales(locale).some(\n    (localeQueue) => {\n      var _a;\n      return (_a = getLocaleQueue(localeQueue)) == null ? void 0 : _a.size;\n    }\n  );\n}\nfunction loadLocaleQueue(locale, localeQueue) {\n  const allLoadersPromise = Promise.all(\n    localeQueue.map((loader) => {\n      removeLoaderFromQueue(locale, loader);\n      return loader().then((partial) => partial.default || partial);\n    })\n  );\n  return allLoadersPromise.then((partials) => addMessages(locale, ...partials));\n}\nconst activeFlushes = {};\nfunction flush(locale) {\n  if (!hasLocaleQueue(locale)) {\n    if (locale in activeFlushes) {\n      return activeFlushes[locale];\n    }\n    return Promise.resolve();\n  }\n  const queues = getLocalesQueues(locale);\n  activeFlushes[locale] = Promise.all(\n    queues.map(\n      ([localeName, localeQueue]) => loadLocaleQueue(localeName, localeQueue)\n    )\n  ).then(() => {\n    if (hasLocaleQueue(locale)) {\n      return flush(locale);\n    }\n    delete activeFlushes[locale];\n  });\n  return activeFlushes[locale];\n}\nfunction registerLocaleLoader(locale, loader) {\n  if (!getLocaleQueue(locale))\n    createLocaleQueue(locale);\n  const localeQueue = getLocaleQueue(locale);\n  if (getLocaleQueue(locale).has(loader))\n    return;\n  if (!hasLocaleDictionary(locale)) {\n    $dictionary.update((d) => {\n      d[locale] = {};\n      return d;\n    });\n  }\n  localeQueue.add(loader);\n}\n\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\nvar __objRest$1 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$2.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$2.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst defaultFormats = {\n  number: {\n    scientific: { notation: \"scientific\" },\n    engineering: { notation: \"engineering\" },\n    compactLong: { notation: \"compact\", compactDisplay: \"long\" },\n    compactShort: { notation: \"compact\", compactDisplay: \"short\" }\n  },\n  date: {\n    short: { month: \"numeric\", day: \"numeric\", year: \"2-digit\" },\n    medium: { month: \"short\", day: \"numeric\", year: \"numeric\" },\n    long: { month: \"long\", day: \"numeric\", year: \"numeric\" },\n    full: { weekday: \"long\", month: \"long\", day: \"numeric\", year: \"numeric\" }\n  },\n  time: {\n    short: { hour: \"numeric\", minute: \"numeric\" },\n    medium: { hour: \"numeric\", minute: \"numeric\", second: \"numeric\" },\n    long: {\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      timeZoneName: \"short\"\n    },\n    full: {\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      timeZoneName: \"short\"\n    }\n  }\n};\nfunction defaultMissingKeyHandler({ locale, id }) {\n  console.warn(\n    `[svelte-i18n] The message \"${id}\" was not found in \"${getPossibleLocales(\n      locale\n    ).join('\", \"')}\".${hasLocaleQueue(getCurrentLocale()) ? `\n\nNote: there are at least one loader still registered to this locale that wasn't executed.` : \"\"}`\n  );\n}\nconst defaultOptions = {\n  fallbackLocale: null,\n  loadingDelay: 200,\n  formats: defaultFormats,\n  warnOnMissingMessages: true,\n  handleMissingMessage: void 0,\n  ignoreTag: true\n};\nconst options = defaultOptions;\nfunction getOptions() {\n  return options;\n}\nfunction init(opts) {\n  const _a = opts, { formats } = _a, rest = __objRest$1(_a, [\"formats\"]);\n  let initialLocale = opts.fallbackLocale;\n  if (opts.initialLocale) {\n    try {\n      if (intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat.resolveLocale(opts.initialLocale)) {\n        initialLocale = opts.initialLocale;\n      }\n    } catch (e) {\n      console.warn(\n        `[svelte-i18n] The initial locale \"${opts.initialLocale}\" is not a valid locale.`\n      );\n    }\n  }\n  if (rest.warnOnMissingMessages) {\n    delete rest.warnOnMissingMessages;\n    if (rest.handleMissingMessage == null) {\n      rest.handleMissingMessage = defaultMissingKeyHandler;\n    } else {\n      console.warn(\n        '[svelte-i18n] The \"warnOnMissingMessages\" option is deprecated. Please use the \"handleMissingMessage\" option instead.'\n      );\n    }\n  }\n  Object.assign(options, rest, { initialLocale });\n  if (formats) {\n    if (\"number\" in formats) {\n      Object.assign(options.formats.number, formats.number);\n    }\n    if (\"date\" in formats) {\n      Object.assign(options.formats.date, formats.date);\n    }\n    if (\"time\" in formats) {\n      Object.assign(options.formats.time, formats.time);\n    }\n  }\n  return $locale.set(initialLocale);\n}\n\nconst $isLoading = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.writable)(false);\n\nvar __defProp$1 = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$1.call(b, prop))\n      __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b)) {\n      if (__propIsEnum$1.call(b, prop))\n        __defNormalProp$1(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nlet current;\nconst internalLocale = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.writable)(null);\nfunction getSubLocales(refLocale) {\n  return refLocale.split(\"-\").map((_, i, arr) => arr.slice(0, i + 1).join(\"-\")).reverse();\n}\nfunction getPossibleLocales(refLocale, fallbackLocale = getOptions().fallbackLocale) {\n  const locales = getSubLocales(refLocale);\n  if (fallbackLocale) {\n    return [.../* @__PURE__ */ new Set([...locales, ...getSubLocales(fallbackLocale)])];\n  }\n  return locales;\n}\nfunction getCurrentLocale() {\n  return current != null ? current : void 0;\n}\ninternalLocale.subscribe((newLocale) => {\n  current = newLocale != null ? newLocale : void 0;\n  if (typeof window !== \"undefined\" && newLocale != null) {\n    document.documentElement.setAttribute(\"lang\", newLocale);\n  }\n});\nconst set = (newLocale) => {\n  if (newLocale && getClosestAvailableLocale(newLocale) && hasLocaleQueue(newLocale)) {\n    const { loadingDelay } = getOptions();\n    let loadingTimer;\n    if (typeof window !== \"undefined\" && getCurrentLocale() != null && loadingDelay) {\n      loadingTimer = window.setTimeout(\n        () => $isLoading.set(true),\n        loadingDelay\n      );\n    } else {\n      $isLoading.set(true);\n    }\n    return flush(newLocale).then(() => {\n      internalLocale.set(newLocale);\n    }).finally(() => {\n      clearTimeout(loadingTimer);\n      $isLoading.set(false);\n    });\n  }\n  return internalLocale.set(newLocale);\n};\nconst $locale = __spreadProps(__spreadValues$1({}, internalLocale), {\n  set\n});\n\nconst getFromQueryString = (queryString, key) => {\n  const keyVal = queryString.split(\"&\").find((i) => i.indexOf(`${key}=`) === 0);\n  if (keyVal) {\n    return keyVal.split(\"=\").pop();\n  }\n  return null;\n};\nconst getFirstMatch = (base, pattern) => {\n  const match = pattern.exec(base);\n  if (!match)\n    return null;\n  return match[1] || null;\n};\nconst getLocaleFromHostname = (hostname) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFirstMatch(window.location.hostname, hostname);\n};\nconst getLocaleFromPathname = (pathname) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFirstMatch(window.location.pathname, pathname);\n};\nconst getLocaleFromNavigator = () => {\n  if (typeof window === \"undefined\")\n    return null;\n  return window.navigator.language || window.navigator.languages[0];\n};\nconst getLocaleFromQueryString = (search) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFromQueryString(window.location.search.substr(1), search);\n};\nconst getLocaleFromHash = (hash) => {\n  if (typeof window === \"undefined\")\n    return null;\n  return getFromQueryString(window.location.hash.substr(1), hash);\n};\n\nconst monadicMemoize = (fn) => {\n  const cache = /* @__PURE__ */ Object.create(null);\n  const memoizedFn = (arg) => {\n    const cacheKey = JSON.stringify(arg);\n    if (cacheKey in cache) {\n      return cache[cacheKey];\n    }\n    return cache[cacheKey] = fn(arg);\n  };\n  return memoizedFn;\n};\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst getIntlFormatterOptions = (type, name) => {\n  const { formats } = getOptions();\n  if (type in formats && name in formats[type]) {\n    return formats[type][name];\n  }\n  throw new Error(`[svelte-i18n] Unknown \"${name}\" ${type} format.`);\n};\nconst createNumberFormatter = monadicMemoize(\n  (_a) => {\n    var _b = _a, { locale, format } = _b, options = __objRest(_b, [\"locale\", \"format\"]);\n    if (locale == null) {\n      throw new Error('[svelte-i18n] A \"locale\" must be set to format numbers');\n    }\n    if (format) {\n      options = getIntlFormatterOptions(\"number\", format);\n    }\n    return new Intl.NumberFormat(locale, options);\n  }\n);\nconst createDateFormatter = monadicMemoize(\n  (_c) => {\n    var _d = _c, { locale, format } = _d, options = __objRest(_d, [\"locale\", \"format\"]);\n    if (locale == null) {\n      throw new Error('[svelte-i18n] A \"locale\" must be set to format dates');\n    }\n    if (format) {\n      options = getIntlFormatterOptions(\"date\", format);\n    } else if (Object.keys(options).length === 0) {\n      options = getIntlFormatterOptions(\"date\", \"short\");\n    }\n    return new Intl.DateTimeFormat(locale, options);\n  }\n);\nconst createTimeFormatter = monadicMemoize(\n  (_e) => {\n    var _f = _e, { locale, format } = _f, options = __objRest(_f, [\"locale\", \"format\"]);\n    if (locale == null) {\n      throw new Error(\n        '[svelte-i18n] A \"locale\" must be set to format time values'\n      );\n    }\n    if (format) {\n      options = getIntlFormatterOptions(\"time\", format);\n    } else if (Object.keys(options).length === 0) {\n      options = getIntlFormatterOptions(\"time\", \"short\");\n    }\n    return new Intl.DateTimeFormat(locale, options);\n  }\n);\nconst getNumberFormatter = (_g = {}) => {\n  var _h = _g, {\n    locale = getCurrentLocale()\n  } = _h, args = __objRest(_h, [\n    \"locale\"\n  ]);\n  return createNumberFormatter(__spreadValues({ locale }, args));\n};\nconst getDateFormatter = (_i = {}) => {\n  var _j = _i, {\n    locale = getCurrentLocale()\n  } = _j, args = __objRest(_j, [\n    \"locale\"\n  ]);\n  return createDateFormatter(__spreadValues({ locale }, args));\n};\nconst getTimeFormatter = (_k = {}) => {\n  var _l = _k, {\n    locale = getCurrentLocale()\n  } = _l, args = __objRest(_l, [\n    \"locale\"\n  ]);\n  return createTimeFormatter(__spreadValues({ locale }, args));\n};\nconst getMessageFormatter = monadicMemoize(\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  (message, locale = getCurrentLocale()) => new intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat(message, locale, getOptions().formats, {\n    ignoreTag: getOptions().ignoreTag\n  })\n);\n\nconst formatMessage = (id, options = {}) => {\n  var _a, _b, _c, _d;\n  let messageObj = options;\n  if (typeof id === \"object\") {\n    messageObj = id;\n    id = messageObj.id;\n  }\n  const {\n    values,\n    locale = getCurrentLocale(),\n    default: defaultValue\n  } = messageObj;\n  if (locale == null) {\n    throw new Error(\n      \"[svelte-i18n] Cannot format a message without first setting the initial locale.\"\n    );\n  }\n  let message = lookup(id, locale);\n  if (!message) {\n    message = (_d = (_c = (_b = (_a = getOptions()).handleMissingMessage) == null ? void 0 : _b.call(_a, { locale, id, defaultValue })) != null ? _c : defaultValue) != null ? _d : id;\n  } else if (typeof message !== \"string\") {\n    console.warn(\n      `[svelte-i18n] Message with id \"${id}\" must be of type \"string\", found: \"${typeof message}\". Gettin its value through the \"$format\" method is deprecated; use the \"json\" method instead.`\n    );\n    return message;\n  }\n  if (!values) {\n    return message;\n  }\n  let result = message;\n  try {\n    result = getMessageFormatter(message, locale).format(values);\n  } catch (e) {\n    if (e instanceof Error) {\n      console.warn(\n        `[svelte-i18n] Message \"${id}\" has syntax error:`,\n        e.message\n      );\n    }\n  }\n  return result;\n};\nconst formatTime = (t, options) => {\n  return getTimeFormatter(options).format(t);\n};\nconst formatDate = (d, options) => {\n  return getDateFormatter(options).format(d);\n};\nconst formatNumber = (n, options) => {\n  return getNumberFormatter(options).format(n);\n};\nconst getJSON = (id, locale = getCurrentLocale()) => {\n  return lookup(id, locale);\n};\nconst $format = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale, $dictionary], () => formatMessage);\nconst $formatTime = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale], () => formatTime);\nconst $formatDate = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale], () => formatDate);\nconst $formatNumber = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale], () => formatNumber);\nconst $getJSON = (0,svelte_store__WEBPACK_IMPORTED_MODULE_0__.derived)([$locale, $dictionary], () => getJSON);\n\nfunction unwrapFunctionStore(store) {\n  let localReference;\n  const cancel = store.subscribe((value) => localReference = value);\n  const fn = (...args) => localReference(...args);\n  fn.freeze = cancel;\n  return fn;\n}\n\nfunction defineMessages(i) {\n  return i;\n}\nfunction waitLocale(locale) {\n  return flush(locale || getCurrentLocale() || getOptions().initialLocale);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3ZlbHRlLWkxOG4vZGlzdC9ydW50aW1lLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDZjtBQUNxQjs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvQkFBb0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixzREFBUSxHQUFHO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwyQkFBMkI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0RBQWEsaUJBQWlCO0FBQzlDO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUJBQWlCLHFEQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBTztBQUN2QixvQkFBb0IscURBQU87QUFDM0Isb0JBQW9CLHFEQUFPO0FBQzNCLHNCQUFzQixxREFBTztBQUM3QixpQkFBaUIscURBQU87O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vem9yby8uL25vZGVfbW9kdWxlcy9zdmVsdGUtaTE4bi9kaXN0L3J1bnRpbWUuZXNtLmpzPzAyYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd3JpdGFibGUsIGRlcml2ZWQgfSBmcm9tICdzdmVsdGUvc3RvcmUnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuaW1wb3J0IHsgSW50bE1lc3NhZ2VGb3JtYXQgfSBmcm9tICdpbnRsLW1lc3NhZ2Vmb3JtYXQnO1xuXG5mdW5jdGlvbiBkZWx2ZShvYmosIGZ1bGxLZXkpIHtcbiAgaWYgKGZ1bGxLZXkgPT0gbnVsbClcbiAgICByZXR1cm4gdm9pZCAwO1xuICBpZiAoZnVsbEtleSBpbiBvYmopIHtcbiAgICByZXR1cm4gb2JqW2Z1bGxLZXldO1xuICB9XG4gIGNvbnN0IGtleXMgPSBmdWxsS2V5LnNwbGl0KFwiLlwiKTtcbiAgbGV0IHJlc3VsdCA9IG9iajtcbiAgZm9yIChsZXQgcCA9IDA7IHAgPCBrZXlzLmxlbmd0aDsgcCsrKSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGlmIChwID4gMCkge1xuICAgICAgICBjb25zdCBwYXJ0aWFsS2V5ID0ga2V5cy5zbGljZShwLCBrZXlzLmxlbmd0aCkuam9pbihcIi5cIik7XG4gICAgICAgIGlmIChwYXJ0aWFsS2V5IGluIHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdFtwYXJ0aWFsS2V5XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0ID0gcmVzdWx0W2tleXNbcF1dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmNvbnN0IGxvb2t1cENhY2hlID0ge307XG5jb25zdCBhZGRUb0NhY2hlID0gKHBhdGgsIGxvY2FsZSwgbWVzc2FnZSkgPT4ge1xuICBpZiAoIW1lc3NhZ2UpXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIGlmICghKGxvY2FsZSBpbiBsb29rdXBDYWNoZSkpXG4gICAgbG9va3VwQ2FjaGVbbG9jYWxlXSA9IHt9O1xuICBpZiAoIShwYXRoIGluIGxvb2t1cENhY2hlW2xvY2FsZV0pKVxuICAgIGxvb2t1cENhY2hlW2xvY2FsZV1bcGF0aF0gPSBtZXNzYWdlO1xuICByZXR1cm4gbWVzc2FnZTtcbn07XG5jb25zdCBsb29rdXAgPSAocGF0aCwgcmVmTG9jYWxlKSA9PiB7XG4gIGlmIChyZWZMb2NhbGUgPT0gbnVsbClcbiAgICByZXR1cm4gdm9pZCAwO1xuICBpZiAocmVmTG9jYWxlIGluIGxvb2t1cENhY2hlICYmIHBhdGggaW4gbG9va3VwQ2FjaGVbcmVmTG9jYWxlXSkge1xuICAgIHJldHVybiBsb29rdXBDYWNoZVtyZWZMb2NhbGVdW3BhdGhdO1xuICB9XG4gIGNvbnN0IGxvY2FsZXMgPSBnZXRQb3NzaWJsZUxvY2FsZXMocmVmTG9jYWxlKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbG9jYWxlID0gbG9jYWxlc1tpXTtcbiAgICBjb25zdCBtZXNzYWdlID0gZ2V0TWVzc2FnZUZyb21EaWN0aW9uYXJ5KGxvY2FsZSwgcGF0aCk7XG4gICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBhZGRUb0NhY2hlKHBhdGgsIHJlZkxvY2FsZSwgbWVzc2FnZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59O1xuXG5sZXQgZGljdGlvbmFyeTtcbmNvbnN0ICRkaWN0aW9uYXJ5ID0gd3JpdGFibGUoe30pO1xuZnVuY3Rpb24gZ2V0TG9jYWxlRGljdGlvbmFyeShsb2NhbGUpIHtcbiAgcmV0dXJuIGRpY3Rpb25hcnlbbG9jYWxlXSB8fCBudWxsO1xufVxuZnVuY3Rpb24gaGFzTG9jYWxlRGljdGlvbmFyeShsb2NhbGUpIHtcbiAgcmV0dXJuIGxvY2FsZSBpbiBkaWN0aW9uYXJ5O1xufVxuZnVuY3Rpb24gZ2V0TWVzc2FnZUZyb21EaWN0aW9uYXJ5KGxvY2FsZSwgaWQpIHtcbiAgaWYgKCFoYXNMb2NhbGVEaWN0aW9uYXJ5KGxvY2FsZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBsb2NhbGVEaWN0aW9uYXJ5ID0gZ2V0TG9jYWxlRGljdGlvbmFyeShsb2NhbGUpO1xuICBjb25zdCBtYXRjaCA9IGRlbHZlKGxvY2FsZURpY3Rpb25hcnksIGlkKTtcbiAgcmV0dXJuIG1hdGNoO1xufVxuZnVuY3Rpb24gZ2V0Q2xvc2VzdEF2YWlsYWJsZUxvY2FsZShyZWZMb2NhbGUpIHtcbiAgaWYgKHJlZkxvY2FsZSA9PSBudWxsKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGNvbnN0IHJlbGF0ZWRMb2NhbGVzID0gZ2V0UG9zc2libGVMb2NhbGVzKHJlZkxvY2FsZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVsYXRlZExvY2FsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBsb2NhbGUgPSByZWxhdGVkTG9jYWxlc1tpXTtcbiAgICBpZiAoaGFzTG9jYWxlRGljdGlvbmFyeShsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gbG9jYWxlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gYWRkTWVzc2FnZXMobG9jYWxlLCAuLi5wYXJ0aWFscykge1xuICBkZWxldGUgbG9va3VwQ2FjaGVbbG9jYWxlXTtcbiAgJGRpY3Rpb25hcnkudXBkYXRlKChkKSA9PiB7XG4gICAgZFtsb2NhbGVdID0gZGVlcG1lcmdlLmFsbChbZFtsb2NhbGVdIHx8IHt9LCAuLi5wYXJ0aWFsc10pO1xuICAgIHJldHVybiBkO1xuICB9KTtcbn1cbmNvbnN0ICRsb2NhbGVzID0gZGVyaXZlZChcbiAgWyRkaWN0aW9uYXJ5XSxcbiAgKFtkaWN0aW9uYXJ5Ml0pID0+IE9iamVjdC5rZXlzKGRpY3Rpb25hcnkyKVxuKTtcbiRkaWN0aW9uYXJ5LnN1YnNjcmliZSgobmV3RGljdGlvbmFyeSkgPT4gZGljdGlvbmFyeSA9IG5ld0RpY3Rpb25hcnkpO1xuXG5jb25zdCBxdWV1ZSA9IHt9O1xuZnVuY3Rpb24gY3JlYXRlTG9jYWxlUXVldWUobG9jYWxlKSB7XG4gIHF1ZXVlW2xvY2FsZV0gPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xufVxuZnVuY3Rpb24gcmVtb3ZlTG9hZGVyRnJvbVF1ZXVlKGxvY2FsZSwgbG9hZGVyKSB7XG4gIHF1ZXVlW2xvY2FsZV0uZGVsZXRlKGxvYWRlcik7XG4gIGlmIChxdWV1ZVtsb2NhbGVdLnNpemUgPT09IDApIHtcbiAgICBkZWxldGUgcXVldWVbbG9jYWxlXTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TG9jYWxlUXVldWUobG9jYWxlKSB7XG4gIHJldHVybiBxdWV1ZVtsb2NhbGVdO1xufVxuZnVuY3Rpb24gZ2V0TG9jYWxlc1F1ZXVlcyhsb2NhbGUpIHtcbiAgcmV0dXJuIGdldFBvc3NpYmxlTG9jYWxlcyhsb2NhbGUpLm1hcCgobG9jYWxlSXRlbSkgPT4ge1xuICAgIGNvbnN0IGxvY2FsZVF1ZXVlID0gZ2V0TG9jYWxlUXVldWUobG9jYWxlSXRlbSk7XG4gICAgcmV0dXJuIFtsb2NhbGVJdGVtLCBsb2NhbGVRdWV1ZSA/IFsuLi5sb2NhbGVRdWV1ZV0gOiBbXV07XG4gIH0pLmZpbHRlcigoWywgbG9jYWxlUXVldWVdKSA9PiBsb2NhbGVRdWV1ZS5sZW5ndGggPiAwKTtcbn1cbmZ1bmN0aW9uIGhhc0xvY2FsZVF1ZXVlKGxvY2FsZSkge1xuICBpZiAobG9jYWxlID09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZ2V0UG9zc2libGVMb2NhbGVzKGxvY2FsZSkuc29tZShcbiAgICAobG9jYWxlUXVldWUpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIHJldHVybiAoX2EgPSBnZXRMb2NhbGVRdWV1ZShsb2NhbGVRdWV1ZSkpID09IG51bGwgPyB2b2lkIDAgOiBfYS5zaXplO1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGxvYWRMb2NhbGVRdWV1ZShsb2NhbGUsIGxvY2FsZVF1ZXVlKSB7XG4gIGNvbnN0IGFsbExvYWRlcnNQcm9taXNlID0gUHJvbWlzZS5hbGwoXG4gICAgbG9jYWxlUXVldWUubWFwKChsb2FkZXIpID0+IHtcbiAgICAgIHJlbW92ZUxvYWRlckZyb21RdWV1ZShsb2NhbGUsIGxvYWRlcik7XG4gICAgICByZXR1cm4gbG9hZGVyKCkudGhlbigocGFydGlhbCkgPT4gcGFydGlhbC5kZWZhdWx0IHx8IHBhcnRpYWwpO1xuICAgIH0pXG4gICk7XG4gIHJldHVybiBhbGxMb2FkZXJzUHJvbWlzZS50aGVuKChwYXJ0aWFscykgPT4gYWRkTWVzc2FnZXMobG9jYWxlLCAuLi5wYXJ0aWFscykpO1xufVxuY29uc3QgYWN0aXZlRmx1c2hlcyA9IHt9O1xuZnVuY3Rpb24gZmx1c2gobG9jYWxlKSB7XG4gIGlmICghaGFzTG9jYWxlUXVldWUobG9jYWxlKSkge1xuICAgIGlmIChsb2NhbGUgaW4gYWN0aXZlRmx1c2hlcykge1xuICAgICAgcmV0dXJuIGFjdGl2ZUZsdXNoZXNbbG9jYWxlXTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIGNvbnN0IHF1ZXVlcyA9IGdldExvY2FsZXNRdWV1ZXMobG9jYWxlKTtcbiAgYWN0aXZlRmx1c2hlc1tsb2NhbGVdID0gUHJvbWlzZS5hbGwoXG4gICAgcXVldWVzLm1hcChcbiAgICAgIChbbG9jYWxlTmFtZSwgbG9jYWxlUXVldWVdKSA9PiBsb2FkTG9jYWxlUXVldWUobG9jYWxlTmFtZSwgbG9jYWxlUXVldWUpXG4gICAgKVxuICApLnRoZW4oKCkgPT4ge1xuICAgIGlmIChoYXNMb2NhbGVRdWV1ZShsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gZmx1c2gobG9jYWxlKTtcbiAgICB9XG4gICAgZGVsZXRlIGFjdGl2ZUZsdXNoZXNbbG9jYWxlXTtcbiAgfSk7XG4gIHJldHVybiBhY3RpdmVGbHVzaGVzW2xvY2FsZV07XG59XG5mdW5jdGlvbiByZWdpc3RlckxvY2FsZUxvYWRlcihsb2NhbGUsIGxvYWRlcikge1xuICBpZiAoIWdldExvY2FsZVF1ZXVlKGxvY2FsZSkpXG4gICAgY3JlYXRlTG9jYWxlUXVldWUobG9jYWxlKTtcbiAgY29uc3QgbG9jYWxlUXVldWUgPSBnZXRMb2NhbGVRdWV1ZShsb2NhbGUpO1xuICBpZiAoZ2V0TG9jYWxlUXVldWUobG9jYWxlKS5oYXMobG9hZGVyKSlcbiAgICByZXR1cm47XG4gIGlmICghaGFzTG9jYWxlRGljdGlvbmFyeShsb2NhbGUpKSB7XG4gICAgJGRpY3Rpb25hcnkudXBkYXRlKChkKSA9PiB7XG4gICAgICBkW2xvY2FsZV0gPSB7fTtcbiAgICAgIHJldHVybiBkO1xuICAgIH0pO1xuICB9XG4gIGxvY2FsZVF1ZXVlLmFkZChsb2FkZXIpO1xufVxuXG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyQyID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AkMiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtJDIgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fb2JqUmVzdCQxID0gKHNvdXJjZSwgZXhjbHVkZSkgPT4ge1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIGZvciAodmFyIHByb3AgaW4gc291cmNlKVxuICAgIGlmIChfX2hhc093blByb3AkMi5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMkMilcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMkMihzb3VyY2UpKSB7XG4gICAgICBpZiAoZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMCAmJiBfX3Byb3BJc0VudW0kMi5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuY29uc3QgZGVmYXVsdEZvcm1hdHMgPSB7XG4gIG51bWJlcjoge1xuICAgIHNjaWVudGlmaWM6IHsgbm90YXRpb246IFwic2NpZW50aWZpY1wiIH0sXG4gICAgZW5naW5lZXJpbmc6IHsgbm90YXRpb246IFwiZW5naW5lZXJpbmdcIiB9LFxuICAgIGNvbXBhY3RMb25nOiB7IG5vdGF0aW9uOiBcImNvbXBhY3RcIiwgY29tcGFjdERpc3BsYXk6IFwibG9uZ1wiIH0sXG4gICAgY29tcGFjdFNob3J0OiB7IG5vdGF0aW9uOiBcImNvbXBhY3RcIiwgY29tcGFjdERpc3BsYXk6IFwic2hvcnRcIiB9XG4gIH0sXG4gIGRhdGU6IHtcbiAgICBzaG9ydDogeyBtb250aDogXCJudW1lcmljXCIsIGRheTogXCJudW1lcmljXCIsIHllYXI6IFwiMi1kaWdpdFwiIH0sXG4gICAgbWVkaXVtOiB7IG1vbnRoOiBcInNob3J0XCIsIGRheTogXCJudW1lcmljXCIsIHllYXI6IFwibnVtZXJpY1wiIH0sXG4gICAgbG9uZzogeyBtb250aDogXCJsb25nXCIsIGRheTogXCJudW1lcmljXCIsIHllYXI6IFwibnVtZXJpY1wiIH0sXG4gICAgZnVsbDogeyB3ZWVrZGF5OiBcImxvbmdcIiwgbW9udGg6IFwibG9uZ1wiLCBkYXk6IFwibnVtZXJpY1wiLCB5ZWFyOiBcIm51bWVyaWNcIiB9XG4gIH0sXG4gIHRpbWU6IHtcbiAgICBzaG9ydDogeyBob3VyOiBcIm51bWVyaWNcIiwgbWludXRlOiBcIm51bWVyaWNcIiB9LFxuICAgIG1lZGl1bTogeyBob3VyOiBcIm51bWVyaWNcIiwgbWludXRlOiBcIm51bWVyaWNcIiwgc2Vjb25kOiBcIm51bWVyaWNcIiB9LFxuICAgIGxvbmc6IHtcbiAgICAgIGhvdXI6IFwibnVtZXJpY1wiLFxuICAgICAgbWludXRlOiBcIm51bWVyaWNcIixcbiAgICAgIHNlY29uZDogXCJudW1lcmljXCIsXG4gICAgICB0aW1lWm9uZU5hbWU6IFwic2hvcnRcIlxuICAgIH0sXG4gICAgZnVsbDoge1xuICAgICAgaG91cjogXCJudW1lcmljXCIsXG4gICAgICBtaW51dGU6IFwibnVtZXJpY1wiLFxuICAgICAgc2Vjb25kOiBcIm51bWVyaWNcIixcbiAgICAgIHRpbWVab25lTmFtZTogXCJzaG9ydFwiXG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gZGVmYXVsdE1pc3NpbmdLZXlIYW5kbGVyKHsgbG9jYWxlLCBpZCB9KSB7XG4gIGNvbnNvbGUud2FybihcbiAgICBgW3N2ZWx0ZS1pMThuXSBUaGUgbWVzc2FnZSBcIiR7aWR9XCIgd2FzIG5vdCBmb3VuZCBpbiBcIiR7Z2V0UG9zc2libGVMb2NhbGVzKFxuICAgICAgbG9jYWxlXG4gICAgKS5qb2luKCdcIiwgXCInKX1cIi4ke2hhc0xvY2FsZVF1ZXVlKGdldEN1cnJlbnRMb2NhbGUoKSkgPyBgXG5cbk5vdGU6IHRoZXJlIGFyZSBhdCBsZWFzdCBvbmUgbG9hZGVyIHN0aWxsIHJlZ2lzdGVyZWQgdG8gdGhpcyBsb2NhbGUgdGhhdCB3YXNuJ3QgZXhlY3V0ZWQuYCA6IFwiXCJ9YFxuICApO1xufVxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGZhbGxiYWNrTG9jYWxlOiBudWxsLFxuICBsb2FkaW5nRGVsYXk6IDIwMCxcbiAgZm9ybWF0czogZGVmYXVsdEZvcm1hdHMsXG4gIHdhcm5Pbk1pc3NpbmdNZXNzYWdlczogdHJ1ZSxcbiAgaGFuZGxlTWlzc2luZ01lc3NhZ2U6IHZvaWQgMCxcbiAgaWdub3JlVGFnOiB0cnVlXG59O1xuY29uc3Qgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuZnVuY3Rpb24gZ2V0T3B0aW9ucygpIHtcbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBpbml0KG9wdHMpIHtcbiAgY29uc3QgX2EgPSBvcHRzLCB7IGZvcm1hdHMgfSA9IF9hLCByZXN0ID0gX19vYmpSZXN0JDEoX2EsIFtcImZvcm1hdHNcIl0pO1xuICBsZXQgaW5pdGlhbExvY2FsZSA9IG9wdHMuZmFsbGJhY2tMb2NhbGU7XG4gIGlmIChvcHRzLmluaXRpYWxMb2NhbGUpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKEludGxNZXNzYWdlRm9ybWF0LnJlc29sdmVMb2NhbGUob3B0cy5pbml0aWFsTG9jYWxlKSkge1xuICAgICAgICBpbml0aWFsTG9jYWxlID0gb3B0cy5pbml0aWFsTG9jYWxlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtzdmVsdGUtaTE4bl0gVGhlIGluaXRpYWwgbG9jYWxlIFwiJHtvcHRzLmluaXRpYWxMb2NhbGV9XCIgaXMgbm90IGEgdmFsaWQgbG9jYWxlLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChyZXN0Lndhcm5Pbk1pc3NpbmdNZXNzYWdlcykge1xuICAgIGRlbGV0ZSByZXN0Lndhcm5Pbk1pc3NpbmdNZXNzYWdlcztcbiAgICBpZiAocmVzdC5oYW5kbGVNaXNzaW5nTWVzc2FnZSA9PSBudWxsKSB7XG4gICAgICByZXN0LmhhbmRsZU1pc3NpbmdNZXNzYWdlID0gZGVmYXVsdE1pc3NpbmdLZXlIYW5kbGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdbc3ZlbHRlLWkxOG5dIFRoZSBcIndhcm5Pbk1pc3NpbmdNZXNzYWdlc1wiIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRoZSBcImhhbmRsZU1pc3NpbmdNZXNzYWdlXCIgb3B0aW9uIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCByZXN0LCB7IGluaXRpYWxMb2NhbGUgfSk7XG4gIGlmIChmb3JtYXRzKSB7XG4gICAgaWYgKFwibnVtYmVyXCIgaW4gZm9ybWF0cykge1xuICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLmZvcm1hdHMubnVtYmVyLCBmb3JtYXRzLm51bWJlcik7XG4gICAgfVxuICAgIGlmIChcImRhdGVcIiBpbiBmb3JtYXRzKSB7XG4gICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMuZm9ybWF0cy5kYXRlLCBmb3JtYXRzLmRhdGUpO1xuICAgIH1cbiAgICBpZiAoXCJ0aW1lXCIgaW4gZm9ybWF0cykge1xuICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLmZvcm1hdHMudGltZSwgZm9ybWF0cy50aW1lKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICRsb2NhbGUuc2V0KGluaXRpYWxMb2NhbGUpO1xufVxuXG5jb25zdCAkaXNMb2FkaW5nID0gd3JpdGFibGUoZmFsc2UpO1xuXG52YXIgX19kZWZQcm9wJDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyQxID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AkMSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtJDEgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fZGVmTm9ybWFsUHJvcCQxID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcCQxKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyQxID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxuICAgIGlmIChfX2hhc093blByb3AkMS5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wJDEoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzJDEpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzJDEoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0kMS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AkMShhLCBwcm9wLCBiW3Byb3BdKTtcbiAgICB9XG4gIHJldHVybiBhO1xufTtcbnZhciBfX3NwcmVhZFByb3BzID0gKGEsIGIpID0+IF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpO1xubGV0IGN1cnJlbnQ7XG5jb25zdCBpbnRlcm5hbExvY2FsZSA9IHdyaXRhYmxlKG51bGwpO1xuZnVuY3Rpb24gZ2V0U3ViTG9jYWxlcyhyZWZMb2NhbGUpIHtcbiAgcmV0dXJuIHJlZkxvY2FsZS5zcGxpdChcIi1cIikubWFwKChfLCBpLCBhcnIpID0+IGFyci5zbGljZSgwLCBpICsgMSkuam9pbihcIi1cIikpLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIGdldFBvc3NpYmxlTG9jYWxlcyhyZWZMb2NhbGUsIGZhbGxiYWNrTG9jYWxlID0gZ2V0T3B0aW9ucygpLmZhbGxiYWNrTG9jYWxlKSB7XG4gIGNvbnN0IGxvY2FsZXMgPSBnZXRTdWJMb2NhbGVzKHJlZkxvY2FsZSk7XG4gIGlmIChmYWxsYmFja0xvY2FsZSkge1xuICAgIHJldHVybiBbLi4uLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLmxvY2FsZXMsIC4uLmdldFN1YkxvY2FsZXMoZmFsbGJhY2tMb2NhbGUpXSldO1xuICB9XG4gIHJldHVybiBsb2NhbGVzO1xufVxuZnVuY3Rpb24gZ2V0Q3VycmVudExvY2FsZSgpIHtcbiAgcmV0dXJuIGN1cnJlbnQgIT0gbnVsbCA/IGN1cnJlbnQgOiB2b2lkIDA7XG59XG5pbnRlcm5hbExvY2FsZS5zdWJzY3JpYmUoKG5ld0xvY2FsZSkgPT4ge1xuICBjdXJyZW50ID0gbmV3TG9jYWxlICE9IG51bGwgPyBuZXdMb2NhbGUgOiB2b2lkIDA7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIG5ld0xvY2FsZSAhPSBudWxsKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcImxhbmdcIiwgbmV3TG9jYWxlKTtcbiAgfVxufSk7XG5jb25zdCBzZXQgPSAobmV3TG9jYWxlKSA9PiB7XG4gIGlmIChuZXdMb2NhbGUgJiYgZ2V0Q2xvc2VzdEF2YWlsYWJsZUxvY2FsZShuZXdMb2NhbGUpICYmIGhhc0xvY2FsZVF1ZXVlKG5ld0xvY2FsZSkpIHtcbiAgICBjb25zdCB7IGxvYWRpbmdEZWxheSB9ID0gZ2V0T3B0aW9ucygpO1xuICAgIGxldCBsb2FkaW5nVGltZXI7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2V0Q3VycmVudExvY2FsZSgpICE9IG51bGwgJiYgbG9hZGluZ0RlbGF5KSB7XG4gICAgICBsb2FkaW5nVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gJGlzTG9hZGluZy5zZXQodHJ1ZSksXG4gICAgICAgIGxvYWRpbmdEZWxheVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGlzTG9hZGluZy5zZXQodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBmbHVzaChuZXdMb2NhbGUpLnRoZW4oKCkgPT4ge1xuICAgICAgaW50ZXJuYWxMb2NhbGUuc2V0KG5ld0xvY2FsZSk7XG4gICAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQobG9hZGluZ1RpbWVyKTtcbiAgICAgICRpc0xvYWRpbmcuc2V0KGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaW50ZXJuYWxMb2NhbGUuc2V0KG5ld0xvY2FsZSk7XG59O1xuY29uc3QgJGxvY2FsZSA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMkMSh7fSwgaW50ZXJuYWxMb2NhbGUpLCB7XG4gIHNldFxufSk7XG5cbmNvbnN0IGdldEZyb21RdWVyeVN0cmluZyA9IChxdWVyeVN0cmluZywga2V5KSA9PiB7XG4gIGNvbnN0IGtleVZhbCA9IHF1ZXJ5U3RyaW5nLnNwbGl0KFwiJlwiKS5maW5kKChpKSA9PiBpLmluZGV4T2YoYCR7a2V5fT1gKSA9PT0gMCk7XG4gIGlmIChrZXlWYWwpIHtcbiAgICByZXR1cm4ga2V5VmFsLnNwbGl0KFwiPVwiKS5wb3AoKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBnZXRGaXJzdE1hdGNoID0gKGJhc2UsIHBhdHRlcm4pID0+IHtcbiAgY29uc3QgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMoYmFzZSk7XG4gIGlmICghbWF0Y2gpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiBtYXRjaFsxXSB8fCBudWxsO1xufTtcbmNvbnN0IGdldExvY2FsZUZyb21Ib3N0bmFtZSA9IChob3N0bmFtZSkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGdldEZpcnN0TWF0Y2god2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLCBob3N0bmFtZSk7XG59O1xuY29uc3QgZ2V0TG9jYWxlRnJvbVBhdGhuYW1lID0gKHBhdGhuYW1lKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4gZ2V0Rmlyc3RNYXRjaCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIHBhdGhuYW1lKTtcbn07XG5jb25zdCBnZXRMb2NhbGVGcm9tTmF2aWdhdG9yID0gKCkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZXNbMF07XG59O1xuY29uc3QgZ2V0TG9jYWxlRnJvbVF1ZXJ5U3RyaW5nID0gKHNlYXJjaCkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGdldEZyb21RdWVyeVN0cmluZyh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKSwgc2VhcmNoKTtcbn07XG5jb25zdCBnZXRMb2NhbGVGcm9tSGFzaCA9IChoYXNoKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4gZ2V0RnJvbVF1ZXJ5U3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSwgaGFzaCk7XG59O1xuXG5jb25zdCBtb25hZGljTWVtb2l6ZSA9IChmbikgPT4ge1xuICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBtZW1vaXplZEZuID0gKGFyZykgPT4ge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gSlNPTi5zdHJpbmdpZnkoYXJnKTtcbiAgICBpZiAoY2FjaGVLZXkgaW4gY2FjaGUpIHtcbiAgICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV07XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV0gPSBmbihhcmcpO1xuICB9O1xuICByZXR1cm4gbWVtb2l6ZWRGbjtcbn07XG5cbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fc3ByZWFkVmFsdWVzID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxuICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcbiAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKGIpKSB7XG4gICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXG4gICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcbiAgICB9XG4gIHJldHVybiBhO1xufTtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuY29uc3QgZ2V0SW50bEZvcm1hdHRlck9wdGlvbnMgPSAodHlwZSwgbmFtZSkgPT4ge1xuICBjb25zdCB7IGZvcm1hdHMgfSA9IGdldE9wdGlvbnMoKTtcbiAgaWYgKHR5cGUgaW4gZm9ybWF0cyAmJiBuYW1lIGluIGZvcm1hdHNbdHlwZV0pIHtcbiAgICByZXR1cm4gZm9ybWF0c1t0eXBlXVtuYW1lXTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYFtzdmVsdGUtaTE4bl0gVW5rbm93biBcIiR7bmFtZX1cIiAke3R5cGV9IGZvcm1hdC5gKTtcbn07XG5jb25zdCBjcmVhdGVOdW1iZXJGb3JtYXR0ZXIgPSBtb25hZGljTWVtb2l6ZShcbiAgKF9hKSA9PiB7XG4gICAgdmFyIF9iID0gX2EsIHsgbG9jYWxlLCBmb3JtYXQgfSA9IF9iLCBvcHRpb25zID0gX19vYmpSZXN0KF9iLCBbXCJsb2NhbGVcIiwgXCJmb3JtYXRcIl0pO1xuICAgIGlmIChsb2NhbGUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbc3ZlbHRlLWkxOG5dIEEgXCJsb2NhbGVcIiBtdXN0IGJlIHNldCB0byBmb3JtYXQgbnVtYmVycycpO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICBvcHRpb25zID0gZ2V0SW50bEZvcm1hdHRlck9wdGlvbnMoXCJudW1iZXJcIiwgZm9ybWF0KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICB9XG4pO1xuY29uc3QgY3JlYXRlRGF0ZUZvcm1hdHRlciA9IG1vbmFkaWNNZW1vaXplKFxuICAoX2MpID0+IHtcbiAgICB2YXIgX2QgPSBfYywgeyBsb2NhbGUsIGZvcm1hdCB9ID0gX2QsIG9wdGlvbnMgPSBfX29ialJlc3QoX2QsIFtcImxvY2FsZVwiLCBcImZvcm1hdFwiXSk7XG4gICAgaWYgKGxvY2FsZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tzdmVsdGUtaTE4bl0gQSBcImxvY2FsZVwiIG11c3QgYmUgc2V0IHRvIGZvcm1hdCBkYXRlcycpO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICBvcHRpb25zID0gZ2V0SW50bEZvcm1hdHRlck9wdGlvbnMoXCJkYXRlXCIsIGZvcm1hdCk7XG4gICAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPT09IDApIHtcbiAgICAgIG9wdGlvbnMgPSBnZXRJbnRsRm9ybWF0dGVyT3B0aW9ucyhcImRhdGVcIiwgXCJzaG9ydFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gIH1cbik7XG5jb25zdCBjcmVhdGVUaW1lRm9ybWF0dGVyID0gbW9uYWRpY01lbW9pemUoXG4gIChfZSkgPT4ge1xuICAgIHZhciBfZiA9IF9lLCB7IGxvY2FsZSwgZm9ybWF0IH0gPSBfZiwgb3B0aW9ucyA9IF9fb2JqUmVzdChfZiwgW1wibG9jYWxlXCIsIFwiZm9ybWF0XCJdKTtcbiAgICBpZiAobG9jYWxlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1tzdmVsdGUtaTE4bl0gQSBcImxvY2FsZVwiIG11c3QgYmUgc2V0IHRvIGZvcm1hdCB0aW1lIHZhbHVlcydcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIG9wdGlvbnMgPSBnZXRJbnRsRm9ybWF0dGVyT3B0aW9ucyhcInRpbWVcIiwgZm9ybWF0KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgb3B0aW9ucyA9IGdldEludGxGb3JtYXR0ZXJPcHRpb25zKFwidGltZVwiLCBcInNob3J0XCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBvcHRpb25zKTtcbiAgfVxuKTtcbmNvbnN0IGdldE51bWJlckZvcm1hdHRlciA9IChfZyA9IHt9KSA9PiB7XG4gIHZhciBfaCA9IF9nLCB7XG4gICAgbG9jYWxlID0gZ2V0Q3VycmVudExvY2FsZSgpXG4gIH0gPSBfaCwgYXJncyA9IF9fb2JqUmVzdChfaCwgW1xuICAgIFwibG9jYWxlXCJcbiAgXSk7XG4gIHJldHVybiBjcmVhdGVOdW1iZXJGb3JtYXR0ZXIoX19zcHJlYWRWYWx1ZXMoeyBsb2NhbGUgfSwgYXJncykpO1xufTtcbmNvbnN0IGdldERhdGVGb3JtYXR0ZXIgPSAoX2kgPSB7fSkgPT4ge1xuICB2YXIgX2ogPSBfaSwge1xuICAgIGxvY2FsZSA9IGdldEN1cnJlbnRMb2NhbGUoKVxuICB9ID0gX2osIGFyZ3MgPSBfX29ialJlc3QoX2osIFtcbiAgICBcImxvY2FsZVwiXG4gIF0pO1xuICByZXR1cm4gY3JlYXRlRGF0ZUZvcm1hdHRlcihfX3NwcmVhZFZhbHVlcyh7IGxvY2FsZSB9LCBhcmdzKSk7XG59O1xuY29uc3QgZ2V0VGltZUZvcm1hdHRlciA9IChfayA9IHt9KSA9PiB7XG4gIHZhciBfbCA9IF9rLCB7XG4gICAgbG9jYWxlID0gZ2V0Q3VycmVudExvY2FsZSgpXG4gIH0gPSBfbCwgYXJncyA9IF9fb2JqUmVzdChfbCwgW1xuICAgIFwibG9jYWxlXCJcbiAgXSk7XG4gIHJldHVybiBjcmVhdGVUaW1lRm9ybWF0dGVyKF9fc3ByZWFkVmFsdWVzKHsgbG9jYWxlIH0sIGFyZ3MpKTtcbn07XG5jb25zdCBnZXRNZXNzYWdlRm9ybWF0dGVyID0gbW9uYWRpY01lbW9pemUoXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gIChtZXNzYWdlLCBsb2NhbGUgPSBnZXRDdXJyZW50TG9jYWxlKCkpID0+IG5ldyBJbnRsTWVzc2FnZUZvcm1hdChtZXNzYWdlLCBsb2NhbGUsIGdldE9wdGlvbnMoKS5mb3JtYXRzLCB7XG4gICAgaWdub3JlVGFnOiBnZXRPcHRpb25zKCkuaWdub3JlVGFnXG4gIH0pXG4pO1xuXG5jb25zdCBmb3JtYXRNZXNzYWdlID0gKGlkLCBvcHRpb25zID0ge30pID0+IHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICBsZXQgbWVzc2FnZU9iaiA9IG9wdGlvbnM7XG4gIGlmICh0eXBlb2YgaWQgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtZXNzYWdlT2JqID0gaWQ7XG4gICAgaWQgPSBtZXNzYWdlT2JqLmlkO1xuICB9XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXMsXG4gICAgbG9jYWxlID0gZ2V0Q3VycmVudExvY2FsZSgpLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZVxuICB9ID0gbWVzc2FnZU9iajtcbiAgaWYgKGxvY2FsZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJbc3ZlbHRlLWkxOG5dIENhbm5vdCBmb3JtYXQgYSBtZXNzYWdlIHdpdGhvdXQgZmlyc3Qgc2V0dGluZyB0aGUgaW5pdGlhbCBsb2NhbGUuXCJcbiAgICApO1xuICB9XG4gIGxldCBtZXNzYWdlID0gbG9va3VwKGlkLCBsb2NhbGUpO1xuICBpZiAoIW1lc3NhZ2UpIHtcbiAgICBtZXNzYWdlID0gKF9kID0gKF9jID0gKF9iID0gKF9hID0gZ2V0T3B0aW9ucygpKS5oYW5kbGVNaXNzaW5nTWVzc2FnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHsgbG9jYWxlLCBpZCwgZGVmYXVsdFZhbHVlIH0pKSAhPSBudWxsID8gX2MgOiBkZWZhdWx0VmFsdWUpICE9IG51bGwgPyBfZCA6IGlkO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYFtzdmVsdGUtaTE4bl0gTWVzc2FnZSB3aXRoIGlkIFwiJHtpZH1cIiBtdXN0IGJlIG9mIHR5cGUgXCJzdHJpbmdcIiwgZm91bmQ6IFwiJHt0eXBlb2YgbWVzc2FnZX1cIi4gR2V0dGluIGl0cyB2YWx1ZSB0aHJvdWdoIHRoZSBcIiRmb3JtYXRcIiBtZXRob2QgaXMgZGVwcmVjYXRlZDsgdXNlIHRoZSBcImpzb25cIiBtZXRob2QgaW5zdGVhZC5gXG4gICAgKTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxuICBpZiAoIXZhbHVlcykge1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG4gIGxldCByZXN1bHQgPSBtZXNzYWdlO1xuICB0cnkge1xuICAgIHJlc3VsdCA9IGdldE1lc3NhZ2VGb3JtYXR0ZXIobWVzc2FnZSwgbG9jYWxlKS5mb3JtYXQodmFsdWVzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtzdmVsdGUtaTE4bl0gTWVzc2FnZSBcIiR7aWR9XCIgaGFzIHN5bnRheCBlcnJvcjpgLFxuICAgICAgICBlLm1lc3NhZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuY29uc3QgZm9ybWF0VGltZSA9ICh0LCBvcHRpb25zKSA9PiB7XG4gIHJldHVybiBnZXRUaW1lRm9ybWF0dGVyKG9wdGlvbnMpLmZvcm1hdCh0KTtcbn07XG5jb25zdCBmb3JtYXREYXRlID0gKGQsIG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIGdldERhdGVGb3JtYXR0ZXIob3B0aW9ucykuZm9ybWF0KGQpO1xufTtcbmNvbnN0IGZvcm1hdE51bWJlciA9IChuLCBvcHRpb25zKSA9PiB7XG4gIHJldHVybiBnZXROdW1iZXJGb3JtYXR0ZXIob3B0aW9ucykuZm9ybWF0KG4pO1xufTtcbmNvbnN0IGdldEpTT04gPSAoaWQsIGxvY2FsZSA9IGdldEN1cnJlbnRMb2NhbGUoKSkgPT4ge1xuICByZXR1cm4gbG9va3VwKGlkLCBsb2NhbGUpO1xufTtcbmNvbnN0ICRmb3JtYXQgPSBkZXJpdmVkKFskbG9jYWxlLCAkZGljdGlvbmFyeV0sICgpID0+IGZvcm1hdE1lc3NhZ2UpO1xuY29uc3QgJGZvcm1hdFRpbWUgPSBkZXJpdmVkKFskbG9jYWxlXSwgKCkgPT4gZm9ybWF0VGltZSk7XG5jb25zdCAkZm9ybWF0RGF0ZSA9IGRlcml2ZWQoWyRsb2NhbGVdLCAoKSA9PiBmb3JtYXREYXRlKTtcbmNvbnN0ICRmb3JtYXROdW1iZXIgPSBkZXJpdmVkKFskbG9jYWxlXSwgKCkgPT4gZm9ybWF0TnVtYmVyKTtcbmNvbnN0ICRnZXRKU09OID0gZGVyaXZlZChbJGxvY2FsZSwgJGRpY3Rpb25hcnldLCAoKSA9PiBnZXRKU09OKTtcblxuZnVuY3Rpb24gdW53cmFwRnVuY3Rpb25TdG9yZShzdG9yZSkge1xuICBsZXQgbG9jYWxSZWZlcmVuY2U7XG4gIGNvbnN0IGNhbmNlbCA9IHN0b3JlLnN1YnNjcmliZSgodmFsdWUpID0+IGxvY2FsUmVmZXJlbmNlID0gdmFsdWUpO1xuICBjb25zdCBmbiA9ICguLi5hcmdzKSA9PiBsb2NhbFJlZmVyZW5jZSguLi5hcmdzKTtcbiAgZm4uZnJlZXplID0gY2FuY2VsO1xuICByZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGRlZmluZU1lc3NhZ2VzKGkpIHtcbiAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiB3YWl0TG9jYWxlKGxvY2FsZSkge1xuICByZXR1cm4gZmx1c2gobG9jYWxlIHx8IGdldEN1cnJlbnRMb2NhbGUoKSB8fCBnZXRPcHRpb25zKCkuaW5pdGlhbExvY2FsZSk7XG59XG5cbmV4cG9ydCB7ICRmb3JtYXQgYXMgXywgYWRkTWVzc2FnZXMsICRmb3JtYXREYXRlIGFzIGRhdGUsIGRlZmluZU1lc3NhZ2VzLCAkZGljdGlvbmFyeSBhcyBkaWN0aW9uYXJ5LCAkZm9ybWF0IGFzIGZvcm1hdCwgZ2V0RGF0ZUZvcm1hdHRlciwgZ2V0TG9jYWxlRnJvbUhhc2gsIGdldExvY2FsZUZyb21Ib3N0bmFtZSwgZ2V0TG9jYWxlRnJvbU5hdmlnYXRvciwgZ2V0TG9jYWxlRnJvbVBhdGhuYW1lLCBnZXRMb2NhbGVGcm9tUXVlcnlTdHJpbmcsIGdldE1lc3NhZ2VGb3JtYXR0ZXIsIGdldE51bWJlckZvcm1hdHRlciwgZ2V0VGltZUZvcm1hdHRlciwgaW5pdCwgJGlzTG9hZGluZyBhcyBpc0xvYWRpbmcsICRnZXRKU09OIGFzIGpzb24sICRsb2NhbGUgYXMgbG9jYWxlLCAkbG9jYWxlcyBhcyBsb2NhbGVzLCAkZm9ybWF0TnVtYmVyIGFzIG51bWJlciwgcmVnaXN0ZXJMb2NhbGVMb2FkZXIgYXMgcmVnaXN0ZXIsICRmb3JtYXQgYXMgdCwgJGZvcm1hdFRpbWUgYXMgdGltZSwgdW53cmFwRnVuY3Rpb25TdG9yZSwgd2FpdExvY2FsZSB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/svelte-i18n/dist/runtime.esm.js\n");

/***/ })

};
;